apply plugin: 'war'
apply plugin: 'cargo'

def cargoVersion = '1.3.3'

repositories{
    mavenCentral()
}
buildscript {
    repositories{
        jcenter()
    }
    dependencies{
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6.1'
        classpath 'org.akhikhl.gretty:gretty:1.2.4'
    }
}
dependencies{
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion", "org.codehaus.cargo:cargo-ant:$cargoVersion"
}
apply plugin: 'org.akhikhl.gretty'

war {
    from 'src/main/java'
    webInf { from 'src/main/webapp/WEB-INF/' }
    webXml = file('src/main/webapp/WEB-INF/web.xml')
}

cargo {
    containerId = 'tomcat7x'
    port = 8080
    deployable {
        file = file('build/libs/fastssh-web-$version.war}')
        context = '/fastssh'
    }
    local {
        installer {
            installUrl = 'http://apache.opencas.org/tomcat/tomcat-7/v7.0.67/bin/apache-tomcat-7.0.67.zip'
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }

    }
}

eclipse{
    project{
        comment = "Web components for managing To Do items in the browser."
    }
}

processResources{
    from(sourceSets.main.resources.srcDirs){
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: parsedConfig())

    }
}

task createDistribution(type: Zip,dependsOn: makeReleaseVersion){
    from war.outputs.files
    from(sourceSets*.allSource){
        into 'src'
    }
    from(rootDir){
        include versionFile.name
    }

}

task backupReleaseDistribution(type: Copy){
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project....'
}

task generateClassesDir(description: "Generates the output directory for the production code.") << {
    // since the main sourceSet doesn't contain any files, we have to generate the output folder before
    // executing tomcatRun
    sourceSets.main.output.classesDir.mkdirs()
}
gretty {
    port = 8080
    contextPath ="/${project.name}"
    servletContainer = 'tomcat7'
}